#!/usr/bin/env python3
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

from __future__ import print_function
from __future__ import unicode_literals

import importlib
import os
import runpy
import sys

from argparse import ArgumentParser
from tornado.wsgi import WSGIContainer
from tornado.httpserver import HTTPServer
from tornado.ioloop import IOLoop

# default_home_dir = os.path.normpath("@brbn_home@")
default_home_dir = os.getcwd() # XXX
home_dir = os.environ.get("BRBN_HOME", default_home_dir)

sys.path.append(os.path.join(home_dir, "python"))

from brbn import *
from faller import *

user_dir = os.path.expanduser("~")
default_config_file = os.path.join(user_dir, ".config", "brbn", "config.py")

description = "Brbn serves HTTP requests"

# epilog = """Brbn looks for its configuration in the following locations: (1)
# the FILE indicated by --config if set, (2)
# $HOME/.config/brbn/config.py, (3) /etc/brbn/config.py."""

parser = ArgumentParser(description=description)

parser.add_argument("--app", metavar="MODULE")

parser.add_argument("--port", metavar="PORT",
                    help="Serve HTTP at PORT (8000)")

parser.add_argument("--config", default=default_config_file, metavar="FILE",
                    help="Load configuration from FILE")

_log = logger("brbn")

def main():
    add_logged_module("brbn")
    add_logged_module("tornado")
    
    setup_console_logging("info")

    args = parser.parse_args()
    config = load_config(args)
    app = import_app(args)

    app.load()

    http_server = HTTPServer(WSGIContainer(app))
    http_server.listen(config["port"])

    IOLoop.current().start()

def load_config(args):
    config_file = args.config
        
    if not os.path.exists(config_file):
        config_file = os.path.join("/", "etc", "brbn", "config.py")

    if os.path.exists(config_file):
        _log.info("Loading configuration from {}".format(config_file))

        # init_globals = {"model": model}
        # config = runpy.run_path(config_file, init_globals)

        config = runpy.run_path(config_file)
    else:
        config = dict()

    if args.port is not None:
        config["port"] = args.port

    if "port" not in config:
        config["port"] = 8000

    return config

def import_app(args):
    if args.app is None:
        # XXX get app from config
        raise Exception()

    if ":" in args.app:
        module_name, app_name = args.app.split(":", 1)
    else:
        module_name, app_name = args.app, "app"

    try:
        module = importlib.import_module(module_name)
    except ImportError as e:
        exit(str(e))

    try:
        app = getattr(module, app_name)
    except AttributeError:
        exit("No application named '{}'", app_name)

    return app

def exit(message=None, *args):
    if message is None:
        sys.exit()

    message = "Error: {}".format(message)
    message = message.format(*args)

    sys.exit(message)
        
if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        pass
