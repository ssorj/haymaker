#!/usr/bin/python3
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

from __future__ import print_function

from haystack import *
from plano import *
from mailbox import mbox

mbox_messages_by_id = dict()

def load_mbox_messages(mbox_file):
    notice("Loading messages from {}", mbox_file)

    mb = mbox(mbox_file)

    for mbox_message in mb.values():
        id = mbox_message["Message-ID"]
        mbox_messages_by_id[id] = mbox_message

def import_messages(cursor):
    notice("Importing messages")

    message = Message()
    
    for id, mbox_message in mbox_messages_by_id.items():
        notice("Importing message {}", id)
        
        from_header = mbox_message["From"]
        
        if from_header.endswith("<jira@apache.org>"):
            continue
        
        if from_header.endswith("<qpid-dev@incubator.apache.org>"):
            continue
        
        if from_header.endswith("<git@git.apache.org>"):
            continue

        message.load_from_mbox_message(mbox_message)

        message.thread_id = find_thread_id(mbox_message)

        message.save(cursor)

        cursor.connection.commit()

def find_thread_id(mbox_message):
    in_reply_to = mbox_messages_by_id.get(mbox_message.get("In-Reply-To"))

    while True:
        if in_reply_to is None:
            return mbox_message["Message-ID"]
    
        mbox_message = mbox_messages_by_id[mbox_message.get("In-Reply-To")]
        in_reply_to = mbox_messages_by_id.get(mbox_message.get("In-Reply-To"))

database = MessageDatabase("data/data.sqlite")

for name in list_dir("data", "*.mbox"):
    mbox_file = join("data", name)
    load_mbox_messages(mbox_file)

database.create_schema()

conn = database.connect()
cursor = conn.cursor()

try:
    import_messages(cursor)
finally:
    conn.close()

database.optimize()
