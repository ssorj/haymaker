#!/usr/bin/python3
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

from __future__ import print_function

from haymaker import *
from plano import *
from mailbox import mbox

in_reply_to_ids_by_id = dict()

def import_message_ids(mbox_file):
    notice("Importing message IDs from {}", mbox_file)

    mb = mbox(mbox_file)

    for mbox_message in mb.values():
        id = mbox_message["Message-ID"]
        in_reply_to_id = mbox_message["In-Reply-To"]

        in_reply_to_ids_by_id[id] = in_reply_to_id

def import_messages(cursor, mbox_file):
    notice("Importing messages from {}", mbox_file)
    
    mb = mbox(mbox_file)
    
    for mbox_message in mb.values():
        from_header = mbox_message["From"]
        
        if from_header.endswith("<jira@apache.org>"):
            continue
        
        if from_header.endswith("<qpid-dev@incubator.apache.org>"):
            continue
        
        if from_header.endswith("<git@git.apache.org>"):
            continue

        message = Message.from_mbox_message(mbox_message)

        in_reply_to_ids_by_id[message.id] = message.in_reply_to_id

        message.thread_id = find_thread_id(message)

        # print(message, message.thread_id)
        
        message.save(cursor)

        cursor.connection.commit()

def find_thread_id(message):
    id = message.id
    in_reply_to_id = message.in_reply_to_id

    while True:
        if in_reply_to_id is None:
            return id

        id = in_reply_to_id
        in_reply_to_id = in_reply_to_ids_by_id.get(id)

database = MessageDatabase("data/data.sqlite")

for name in list_dir("data", "*.mbox"):
    mbox_file = join("data", name)
    import_message_ids(mbox_file)

database.create_schema()

conn = database.connect()
cursor = conn.cursor()

try:
    for name in list_dir("data", "*.mbox"):
        mbox_file = join("data", name)
        import_messages(cursor, mbox_file)
finally:
    conn.close()

database.optimize()
